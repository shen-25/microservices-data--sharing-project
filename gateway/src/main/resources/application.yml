server:
  port: 8840


spring:
  application:
    name: gateway
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
        namespace: ""
        # Spring boot admin server访问admin client的默认地址为http://ip:port/actuator
        #但是在我们的大部分项目中都会配置一个servlet.context-path
        #此时admin server默认的访问地址就不对了，然后就回报错
#        metadata:
#          management:
#            context-path: ${server.servlet.context-path}/actuator
    gateway:
      # 开启从注册中心动态创建路由的功能
      discovery:
        locator:
          enabled: false
          lower-case-service-id: true #服务id设置为小写
      # 让gateway通过服务发现组件找到其他的服务
#      routes:
#        - id: after_route
#          # 访问http://localhost:8840/users/1 -> user-center/users/1
#          uri: lb://user-center
#          # predicates 符合添加才放行
#          predicates:
#            - After=2017-01-20T17:42:47.789-07:00[America/Denver]
##             自定义TimeBetween谓词规则 对应类 TimeBetweenRoutePredicateFactory
##            - TimeBetween=上午9:00,下午11:00
##           filters 请求加点东西，例如请求头添加 (key=X-Request-Zeng,value=Shen)
#          filters:
#            # 请求添加header, key, value
#            - AddRequestHeader=X-Request-Zeng, Shen
            # 自定义过滤器规则 对应类 PreLogGatewayFilterFactory
#            - PreLog=a,b
            # 令牌算法限流
            # 在Spring Cloud Gateway中默认提供了 RequestRateLimiter 过滤器来实现限流操作。
#            - name: RequestRateLimiter
#              args:
#                # 令牌桶每秒填充平均速率
#                redis-rate-limiter.replenishRate: 1
#                # 令牌桶的上限
#                redis-rate-limiter.burstCapacity: 2
#                # 使用SpEL表达式从Spring容器中获取Bean对象
#                key-resolver: "#{@pathKeyResolver}"

#        - id: test-center
#          uri: http://localhost:8082
#          predicates:
#            # 当且仅当请求时的时间After配置的时间时，才会转发到用户微服务
#            - After=2010-01-20T17:42:47.789-07:00[America/Denver]

  kafka:
    bootstrap-servers: 192.168.93.129:9092
    producer:
      retries: 3
    consumer:
      auto-offset-reset: latest
      group-id: 0
  zipkin:
    sender:
      type: kafka # 默认是 web
    base-url: http://localhost:9411/
    # 让nacos知道这不是一个微服务
    discovery-client-enabled: false

  sleuth:
    sampler:
      #ProbabilityBasedSampler 抽样策略
      probability: 0.1  # 采样比例, 1.0 表示 100%, 默认是 0.1
      # RateLimitingSampler 抽样策略, 设置了限速采集, spring.sleuth.sampler.probability 属性值无效
      rate: 1  # 每秒间隔接受的 trace 量


  main:
    allow-bean-definition-overriding: true  # 因为将来会引入很多依赖, 难免有重名的 bean


#  redis:
#    port: 6379
#    host: zengshen.org
#    password: 123456


# 这个地方独立配置, 是网关的数据, 代码 GatewayConfig.java 中读取被监听
nacos:
  gateway:
    route:
      config:
        data-id: gateway.json
        group: DEFAULT_GROUP


management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always



